// === ArrowTableIterator.hpp ===
#pragma once

#include <arrow/api.h>
#include <arrow/record_batch.h>
#include <arrow/flight/api.h>
#include <vector>
#include <memory>
#include <tuple>
#include <string>
#include <type_traits>

// ---- Transformer Framework ----
// Base Transformer CRTP: specialize for ArrowType and UserType
template<typename ArrowType, typename UserType, typename Derived>
struct Transformer {
    using arrow_c_type = typename ArrowType::c_type;
    static constexpr UserType forward(arrow_c_type v) {
        return Derived::forward_impl(v);
    }
    static constexpr arrow_c_type backward(UserType v) {
        return Derived::backward_impl(v);
    }
};

// Identity transformer
template<typename ArrowType>
struct Identity : Transformer<ArrowType, typename ArrowType::c_type, Identity<ArrowType>> {
    static constexpr typename ArrowType::c_type forward_impl(typename ArrowType::c_type v) { return v; }
    static constexpr typename ArrowType::c_type backward_impl(typename ArrowType::c_type v) { return v; }
};

// ReceiveAll transformer: catches any arrow::Scalar
struct ReceiveAllTransformer {
    using UserType = std::shared_ptr<arrow::Scalar>;
    static std::shared_ptr<arrow::Scalar> forward_impl(std::shared_ptr<arrow::Scalar> v) { return v; }
    static std::shared_ptr<arrow::Scalar> backward_impl(std::shared_ptr<arrow::Scalar> v) { return v; }
};

// ---- Transformer List with currying ----
template<typename... Ts>
struct TransformerList {
    template<typename New>
    using append = TransformerList<Ts..., New>;
};

template<typename List, size_t N>
struct TransformerAt;
template<typename Head, typename... Tail>
struct TransformerAt<TransformerList<Head, Tail...>, 0> { using type = Head; };
template<typename Head, typename... Tail, size_t N>
struct TransformerAt<TransformerList<Head, Tail...>, N> : TransformerAt<TransformerList<Tail...>, N-1> {};

// ---- Metadata Checker ----
// Default: allow all rows
template<typename SchemaMetadataKey, typename SchemaMetadataValue>
struct MetadataFilter {
    static bool check(const std::shared_ptr<arrow::Schema>& schema,
                      std::shared_ptr<arrow::RecordBatch>,
                      int64_t) {
        auto md = schema->metadata();
        return md && md->Get(SchemaMetadataKey::value).ValueOr("") == SchemaMetadataValue::value;
    }
};

struct AllowAll {
    static bool check(const std::shared_ptr<arrow::Schema>&, std::shared_ptr<arrow::RecordBatch>, int64_t) {
        return true;
    }
};

// ---- Streamed Backend ----
class StreamedBackend {
public:
    explicit StreamedBackend(std::unique_ptr<arrow::flight::FlightStreamReader> reader)
        : reader_(std::move(reader)) {}
    std::shared_ptr<arrow::RecordBatch> next_batch() {
        auto res = reader_->Next();
        if (res.ok() && res.ValueUnsafe()) return res.ValueUnsafe();
        return nullptr;
    }
    std::shared_ptr<arrow::Schema> schema() const { return reader_->schema(); }
private:
    std::unique_ptr<arrow::flight::FlightStreamReader> reader_;
};

// ---- Row Proxy ----
template<typename Transformers>
class RowProxy {
public:
    RowProxy(std::shared_ptr<arrow::RecordBatch> batch, int64_t row)
        : batch_(batch), row_(row) {}

    // get by index
    template<size_t I>
    auto get() const {
        using TransformerT = typename TransformerAt<Transformers, I>::type;
        using CType = typename TransformerT::arrow_c_type;
        auto array = std::static_pointer_cast<typename arrow::NumericArray<typename CType::TypeClass>>(batch_->column(I));
        return TransformerT::forward(array->Value(row_));
    }
    // catch-all sink
    std::vector<std::shared_ptr<arrow::Scalar>> receive_all() const {
        std::vector<std::shared_ptr<arrow::Scalar>> extras;
        size_t ncol = batch_->num_columns();
        constexpr size_t Tcols = std::tuple_size<Transformers>::value;
        for (size_t i = Tcols; i < ncol; ++i) {
            auto res = batch_->column(i)->GetScalar(row_);
            if (res.ok()) extras.push_back(res.ValueUnsafe());
        }
        return extras;
    }
private:
    std::shared_ptr<arrow::RecordBatch> batch_;
    int64_t row_;
};

// ---- Iterator ----
template<typename Backend, typename Transformers, typename MetaChecker = AllowAll>
class RowIterator {
public:
    using value_type = RowProxy<Transformers>;
    RowIterator(std::shared_ptr<Backend> backend, bool end = false)
        : backend_(backend) {
        if (!end) { advance_batch(); advance_row(); }
        row_idx_ = end ? -1 : row_idx_;
    }
    bool operator!=(RowIterator const& other) const {
        return row_idx_ != other.row_idx_ || batch_.get() != other.batch_.get();
    }
    RowIterator& operator++() { advance_row(); return *this; }
    value_type operator*() const { return {batch_, row_idx_}; }
private:
    void advance_batch() { batch_ = backend_->next_batch(); row_idx_ = 0; }
    void advance_row() {
        while (batch_) {
            if (row_idx_ < batch_->num_rows() && MetaChecker::check(batch_->schema(), batch_, row_idx_)) return;
            if (++row_idx_ >= batch_->num_rows()) advance_batch();
        }
        row_idx_ = -1;
    }
    std::shared_ptr<Backend> backend_;
    std::shared_ptr<arrow::RecordBatch> batch_;
    int64_t row_idx_;
};

// ---- Table View ----
template<typename Backend, typename Transformers, typename MetaChecker = AllowAll>
class TableView {
public:
    explicit TableView(std::shared_ptr<Backend> backend) : backend_(backend) {}
    auto begin() { return RowIterator<Backend, Transformers, MetaChecker>(backend_, false); }
    auto end()   { return RowIterator<Backend, Transformers, MetaChecker>(backend_, true); }
    // currying syntax
    template<typename NewTransformer>
    auto addTransformer() const {
        using NewList = typename Transformers::template append<NewTransformer>;
        return TableView<Backend, NewList, MetaChecker>(backend_);
    }
private:
    std::shared_ptr<Backend> backend_;
};


// === flight_double_roundtrip_client.cpp ===
#include "ArrowTableIterator.hpp"
#include <arrow/api.h>
#include <arrow/flight/api.h>
#include <arrow/record_batch.h>
#include <arrow/table.h>
#include <iostream>

struct ProcessTrueKey { static constexpr const char* value = "process"; };
struct ProcessTrueVal { static constexpr const char* value = "true"; };

int main() {
    auto loc = arrow::flight::Location::ForGrpcTcp("localhost", 8815).ValueOrDie();
    auto client = arrow::flight::FlightClient::Connect(loc).ValueOrDie();
    arrow::flight::FlightDescriptor descr = arrow::flight::FlightDescriptor::Command("my_table");

    // Build and set schema metadata to enable filter
    arrow::KeyValueMetadata metadata;
    metadata.Append("process", "true");
    auto schema = arrow::schema({
        arrow::field("i32", arrow::int32()),
        arrow::field("f64", arrow::float64()),
        arrow::field("bol", arrow::boolean()),
        arrow::field("str", arrow::utf8())
    }, std::make_shared<arrow::KeyValueMetadata>(metadata));

    // Build table
    arrow::Int32Builder b1; b1.AppendValues({1,2,3}); std::shared_ptr<arrow::Array> a1; b1.Finish(&a1);
    arrow::DoubleBuilder b2; b2.AppendValues({0.1,0.2,0.3}); std::shared_ptr<arrow::Array> a2; b2.Finish(&a2);
    arrow::BooleanBuilder b3; b3.AppendValues({true,false,true}); std::shared_ptr<arrow::Array> a3; b3.Finish(&a3);
    arrow::StringBuilder b4; b4.AppendValues({"a","b","c"}); std::shared_ptr<arrow::Array> a4; b4.Finish(&a4);
    auto table1 = arrow::Table::Make(schema, {a1,a2,a3,a4});

    auto do_put = [&](std::shared_ptr<arrow::Table> tbl) {
        auto [writer, _] = client->DoPut(descr, tbl->schema());
        arrow::TableBatchReader reader(*tbl);
        reader.set_chunksize(2);
        std::shared_ptr<arrow::RecordBatch> rb;
        while (reader.ReadNext(&rb).ok() && rb) writer->WriteRecordBatch(*rb);
        writer->Close();
    };

    // First roundtrip
    do_put(table1);
    auto info1 = client->GetFlightInfo(descr).ValueOrDie();
    auto stream1 = client->DoGet(info1.endpoints()[0].ticket).ValueOrDie();
    std::shared_ptr<arrow::Table> table2;
    arrow::Table::FromRecordBatchReader(std::move(stream1), &table2).ValueOrDie();
    std::cout << "After 1st roundtrip:\n" << table2->ToString() << std::endl;

    // Second roundtrip
    do_put(table2);
    auto info2 = client->GetFlightInfo(descr).ValueOrDie();
    auto stream2 = client->DoGet(info2.endpoints()[0].ticket).ValueOrDie();
    auto backend = std::make_shared<StreamedBackend>(std::move(stream2));

    // Compose transformer list: index columns + receive_all for extras
    using BaseTs = TransformerList<Identity<arrow::Int32Type>, Identity<arrow::DoubleType>, Identity<arrow::BooleanType>, Identity<arrow::StringType>>;
    auto view = TableView<StreamedBackend, BaseTs, MetadataFilter<ProcessTrueKey, ProcessTrueVal>>(backend)
                    .addTransformer<ReceiveAllTransformer>();

    std::cout << "Rows via iterator with metadata filter after 2nd roundtrip:\n";
    for (auto row : view) {
        // get typed columns
        auto i = row.template get<0>();
        auto d = row.template get<1>();
        auto b = row.template get<2>();
        auto s = row.template get<3>();
        // receive_all extras
        auto extras = row.receive_all();
        std::cout << i << ", " << d << ", " << b << ", " << s;
        std::cout << ", extras=" << extras.size() << std::endl;
    }
    return 0;
}


import pyarrow as pa
import pyarrow.flight as flight
import threading

class EchoFlightServer(flight.FlightServerBase):
    def __init__(self, location):
        super().__init__(location)

    def do_put(self, context, descriptor, reader, writer):
        # Read incoming table
        table = reader.read_all()
        print("Server received table:", table.schema)
        # Echo it back under same descriptor
        writer.begin(table.schema, descriptor)
        # Stream by batches
        for batch in table.to_batches():
            writer.write_batch(batch)
        writer.done_writing()

    def do_get(self, context, ticket):
        # Tickets carry the descriptor
        descriptor = flight.FlightDescriptor.for_command(ticket.ticket)
        # For simplicity, reuse last put (not production safe)
        return flight.RecordBatchStream(self._last_table)

if __name__ == '__main__':
    server = EchoFlightServer(('localhost', 8815))
    print('Starting Flight relay on localhost:8815')
    threading.Thread(target=server.serve).start()

import pyarrow as pa
import pyarrow.flight as flight

# Construct a table with all primitive Arrow types
fields = [
    pa.field('i32', pa.int32()),
    pa.field('f64', pa.float64()),
    pa.field('bol', pa.bool_()),
    pa.field('str', pa.string()),
]
schema = pa.schema(fields)
columns = [
    pa.array([1, 2, 3]),
    pa.array([0.1, 0.2, 0.3]),
    pa.array([True, False, True]),
    pa.array(['a', 'b', 'c']),
]
table = pa.Table.from_arrays(columns, schema=schema)

def main():
    client = flight.FlightClient('grpc://localhost:8815')
    descriptor = flight.FlightDescriptor.for_command(b'my_table')

    # PUT: send table in batches of 2
    writer, _ = client.do_put(descriptor, schema)
    for batch in table.to_batches(2):
        writer.write_batch(batch)
    writer.close()

    # GET: retrieve back streaming row-wise
    info = client.get_flight_info(descriptor)
    reader = client.do_get(info.endpoints[0].ticket)

    print("Batch-wise streaming:")
    for batch in reader:
        print(batch)

    # Row-wise streaming
    print("Row-wise streaming:")
    for record in reader.read_table().to_batches(1):
        for row in record.to_pydict().values():
            print(row)

if __name__ == '__main__':
    main()


// === ArrowTableIterator.hpp ===
#pragma once

#include <arrow/api.h>
#include <arrow/record_batch.h>
#include <arrow/flight/api.h>
#include <vector>
#include <memory>
#include <tuple>
#include <string>
#include <type_traits>

// ---- Transformer Framework ----
// CRTP base: Derived must define 'using arrow_c_type' and forward_impl/backward_impl
// ArrowType: Arrow type class; UserType: desired user-facing type; Derived: CRTP
template<typename ArrowType, typename UserType, typename Derived>
struct Transformer {
    using arrow_type = ArrowType;
    using c_type = typename Derived::arrow_c_type;
    // Forward: Arrow c_type -> UserType
    static constexpr UserType forward(c_type v) {
        return Derived::forward_impl(v);
    }
    // Backward: UserType -> Arrow c_type
    static constexpr c_type backward(UserType v) {
        return Derived::backward_impl(v);
    }
};

// ---- Identity Transformers ----
template<typename Dummy = void>
struct IdentityInt32 : Transformer<arrow::Int32Type, int32_t, IdentityInt32<>> {
    using arrow_c_type = int32_t;
    static constexpr int32_t forward_impl(int32_t v) { return v; }
    static constexpr int32_t backward_impl(int32_t v) { return v; }
};

template<typename Dummy = void>
struct IdentityDouble : Transformer<arrow::DoubleType, double, IdentityDouble<>> {
    using arrow_c_type = double;
    static constexpr double forward_impl(double v) { return v; }
    static constexpr double backward_impl(double v) { return v; }
};

template<typename Dummy = void>
struct IdentityBoolean : Transformer<arrow::BooleanType, bool, IdentityBoolean<>> {
    using arrow_c_type = bool;
    static constexpr bool forward_impl(bool v) { return v; }
    static constexpr bool backward_impl(bool v) { return v; }
};

template<typename Dummy = void>
struct IdentityString : Transformer<arrow::StringType, std::string, IdentityString<>> {
    using arrow_c_type = std::string;
    static std::string forward_impl(const std::string& v) { return v; }
    static std::string backward_impl(const std::string& v) { return v; }
};

// ReceiveAll transformer: catches any arrow::Scalar as user type
struct ReceiveAllTransformer {
    using arrow_c_type = std::shared_ptr<arrow::Scalar>;
    using UserType = std::shared_ptr<arrow::Scalar>;
    static std::shared_ptr<arrow::Scalar> forward_impl(std::shared_ptr<arrow::Scalar> v) { return v; }
    static std::shared_ptr<arrow::Scalar> backward_impl(std::shared_ptr<arrow::Scalar> v) { return v; }
};

// ---- Transformer List with currying ----
template<typename... Ts>
struct TransformerList {
    template<typename New>
    using append = TransformerList<Ts..., New>;
};

template<typename List, size_t N>
struct TransformerAt;

template<typename Head, typename... Tail>
struct TransformerAt<TransformerList<Head, Tail...>, 0> { using type = Head; };

template<typename Head, typename... Tail, size_t N>
struct TransformerAt<TransformerList<Head, Tail...>, N> : TransformerAt<TransformerList<Tail...>, N-1> {};

// ---- Metadata Checker ----
template<typename SchemaMetadataKey, typename SchemaMetadataValue>
struct MetadataFilter {
    static bool check(const std::shared_ptr<arrow::Schema>& schema,
                      std::shared_ptr<arrow::RecordBatch>, int64_t) {
        auto md = schema->metadata();
        return md && md->Get(SchemaMetadataKey::value).ValueOr("") == SchemaMetadataValue::value;
    }
};

struct AllowAll {
    static bool check(const std::shared_ptr<arrow::Schema>&,
                      std::shared_ptr<arrow::RecordBatch>, int64_t) {
        return true;
    }
};

// ---- Streamed Backend ----
class StreamedBackend {
public:
    explicit StreamedBackend(std::unique_ptr<arrow::flight::FlightStreamReader> reader)
        : reader_(std::move(reader)) {}

    std::shared_ptr<arrow::RecordBatch> next_batch() {
        auto res = reader_->Next();
        if (res.ok() && res.ValueUnsafe()) return res.ValueUnsafe();
        return nullptr;
    }
    std::shared_ptr<arrow::Schema> schema() const { return reader_->schema(); }
private:
    std::unique_ptr<arrow::flight::FlightStreamReader> reader_;
};

// ---- Row Proxy ----
template<typename Transformers>
class RowProxy {
public:
    RowProxy(std::shared_ptr<arrow::RecordBatch> batch, int64_t row)
        : batch_(batch), row_(row) {}

    // Access column I
    template<size_t I>
    auto get() const {
        using TransformerT = typename TransformerAt<Transformers, I>::type;
        using ArrowType = typename TransformerT::arrow_type;
        using CType    = typename TransformerT::c_type;

        auto col = batch_->column(I);
        if constexpr (std::is_same_v<ArrowType, arrow::StringType>) {
            auto arr = std::static_pointer_cast<arrow::StringArray>(col);
            auto raw = arr->GetString(row_);
            return TransformerT::forward(raw);
        } else {
            using ArrayType = typename arrow::TypeTraits<ArrowType>::ArrayType;
            auto arr = std::static_pointer_cast<ArrayType>(col);
            auto raw = arr->Value(row_);
            return TransformerT::forward(raw);
        }
    }

    // Catch-all: extra scalars
    std::vector<std::shared_ptr<arrow::Scalar>> receive_all() const {
        std::vector<std::shared_ptr<arrow::Scalar>> extras;
        size_t ncol = batch_->num_columns();
        constexpr size_t Tcols = std::tuple_size<Transformers>::value;
        for (size_t i = Tcols; i < ncol; ++i) {
            auto res = batch_->column(i)->GetScalar(row_);
            if (res.ok()) extras.push_back(res.ValueUnsafe());
        }
        return extras;
    }
private:
    std::shared_ptr<arrow::RecordBatch> batch_;
    int64_t row_;
};

// ---- Iterator ----
template<typename Backend, typename Transformers,
         typename MetaChecker = AllowAll>
class RowIterator {
public:
    using value_type = RowProxy<Transformers>;
    RowIterator(std::shared_ptr<Backend> backend, bool end = false)
        : backend_(backend) {
        if (!end) { advance_batch(); advance_row(); }
        row_idx_ = end ? -1 : row_idx_;
    }
    bool operator!=(RowIterator const& other) const {
        return row_idx_ != other.row_idx_ || batch_.get() != other.batch_.get();
    }
    RowIterator& operator++() { advance_row(); return *this; }
    value_type operator*() const { return {batch_, row_idx_}; }
private:
    void advance_batch() { batch_ = backend_->next_batch(); row_idx_ = 0; }
    void advance_row() {
        while (batch_) {
            if (row_idx_ < batch_->num_rows() && MetaChecker::check(batch_->schema(), batch_, row_idx_))
                return;
            if (++row_idx_ >= batch_->num_rows()) advance_batch();
        }
        row_idx_ = -1;
    }
    std::shared_ptr<Backend> backend_;
    std::shared_ptr<arrow::RecordBatch> batch_;
    int64_t row_idx_;
};

// ---- Table View ----
template<typename Backend, typename Transformers,
         typename MetaChecker = AllowAll>
class TableView {
public:
    explicit TableView(std::shared_ptr<Backend> backend) : backend_(backend) {}
    auto begin() { return RowIterator<Backend, Transformers, MetaChecker>(backend_, false); }
    auto end()   { return RowIterator<Backend, Transformers, MetaChecker>(backend_, true); }
    template<typename New>
    auto addTransformer() const {
        using NewList = typename Transformers::template append<New>;
        return TableView<Backend, NewList, MetaChecker>(backend_);
    }
private:
    std::shared_ptr<Backend> backend_;
};


// === flight_double_roundtrip_client.cpp ===
#include "ArrowTableIterator.hpp"
#include <arrow/api.h>
#include <arrow/flight/api.h>
#include <arrow/record_batch.h>
#include <arrow/table.h>
#include <iostream>

struct ProcessTrueKey { static constexpr const char* value = "process"; };
struct ProcessTrueVal { static constexpr const char* value = "true"; };

int main() {
    auto loc = arrow::flight::Location::ForGrpcTcp("localhost", 8815).ValueOrDie();
    auto client = arrow::flight::FlightClient::Connect(loc).ValueOrDie();
    arrow::flight::FlightDescriptor descr = arrow::flight::FlightDescriptor::Command("my_table");

    arrow::KeyValueMetadata metadata; metadata.Append("process", "true");
    auto schema = arrow::schema({
        arrow::field("i32", arrow::int32()),
        arrow::field("f64", arrow::float64()),
        arrow::field("bol", arrow::boolean()),
        arrow::field("str", arrow::utf8())
    }, std::make_shared<arrow::KeyValueMetadata>(metadata));

    arrow::Int32Builder b1; b1.AppendValues({1,2,3}); std::shared_ptr<arrow::Array> a1; b1.Finish(&a1);
    arrow::DoubleBuilder b2; b2.AppendValues({0.1,0.2,0.3}); std::shared_ptr<arrow::Array> a2; b2.Finish(&a2);
    arrow::BooleanBuilder b3; b3.AppendValues({true,false,true}); std::shared_ptr<arrow::Array> a3; b3.Finish(&a3);
    arrow::StringBuilder b4; b4.AppendValues({"a","b","c"}); std::shared_ptr<arrow::Array> a4; b4.Finish(&a4);
    auto table1 = arrow::Table::Make(schema, {a1,a2,a3,a4});

    auto do_put = [&](std::shared_ptr<arrow::Table> tbl) {
        auto [writer, _] = client->DoPut(descr, tbl->schema());
        arrow::TableBatchReader rdr(*tbl); rdr.set_chunksize(2);
        std::shared_ptr<arrow::RecordBatch> rb;
        while (rdr.ReadNext(&rb).ok() && rb) writer->WriteRecordBatch(*rb);
        writer->Close();
    };

    do_put(table1);
    auto info1 = client->GetFlightInfo(descr).ValueOrDie();
    auto fr1 = client->DoGet(info1.endpoints()[0].ticket).ValueOrDie();
    auto table2_res = arrow::Table::FromRecordBatchReader(fr1.get());
    auto table2 = table2_res.ValueOrDie();
    std::cout << "After 1st roundtrip:\n" << table2->ToString() << std::endl;

    do_put(table2);
    auto info2 = client->GetFlightInfo(descr).ValueOrDie();
    auto fr2 = client->DoGet(info2.endpoints()[0].ticket).ValueOrDie();
    auto backend = std::make_shared<StreamedBackend>(std::move(fr2));

    using BaseTs = TransformerList<IdentityInt32<>, IdentityDouble<>, IdentityBoolean<>, IdentityString<>>;
    auto view = TableView<StreamedBackend, BaseTs, MetadataFilter<ProcessTrueKey, ProcessTrueVal>>(backend)
                    .addTransformer<ReceiveAllTransformer>();

    std::cout << "Rows via iterator with metadata filter after 2nd roundtrip:\n";
    for (auto row : view) {
        auto i = row.template get<0>();
        auto d = row.template get<1>();
        auto b = row.template get<2>();
        auto s = row.template get<3>();
        auto extras = row.receive_all();
        std::cout << i << ", " << d << ", " << b << ", " << s
                  << ", extras=" << extras.size() << std::endl;
    }
    return 0;
}

==============

#pragma once

#include <arrow/api.h>
#include <arrow/record_batch.h>
#include <arrow/flight/api.h>
#include <vector>
#include <memory>
#include <tuple>
#include <string>
#include <type_traits>

// ---- Simplified Transformer Framework ----
// Base transformer interface
template<typename ArrowType, typename UserType>
struct TransformerBase {
    using arrow_type = ArrowType;
    using user_type = UserType;
    
    static UserType forward(const typename arrow::TypeTraits<ArrowType>::CType& v) {
        return static_cast<UserType>(v);
    }
    
    static typename arrow::TypeTraits<ArrowType>::CType backward(const UserType& v) {
        return static_cast<typename arrow::TypeTraits<ArrowType>::CType>(v);
    }
};

// String specialization
template<>
struct TransformerBase<arrow::StringType, std::string> {
    using arrow_type = arrow::StringType;
    using user_type = std::string;
    
    static std::string forward(const std::string& v) { return v; }
    static std::string backward(const std::string& v) { return v; }
};

// ---- Identity Transformers ----
using IdentityInt32 = TransformerBase<arrow::Int32Type, int32_t>;
using IdentityDouble = TransformerBase<arrow::DoubleType, double>;
using IdentityBoolean = TransformerBase<arrow::BooleanType, bool>;
using IdentityString = TransformerBase<arrow::StringType, std::string>;

// ReceiveAll transformer: catches any arrow::Scalar as user type
struct ReceiveAllTransformer {
    using arrow_type = void;  // Special marker
    using user_type = std::shared_ptr<arrow::Scalar>;
    
    static std::shared_ptr<arrow::Scalar> forward(std::shared_ptr<arrow::Scalar> v) { return v; }
    static std::shared_ptr<arrow::Scalar> backward(std::shared_ptr<arrow::Scalar> v) { return v; }
};

// ---- Transformer List ----
template<typename... Ts>
struct TransformerList {
    template<typename New>
    using append = TransformerList<Ts..., New>;
    
    static constexpr size_t size = sizeof...(Ts);
};

template<typename List, size_t N>
struct TransformerAt;

template<typename Head, typename... Tail>
struct TransformerAt<TransformerList<Head, Tail...>, 0> { using type = Head; };

template<typename Head, typename... Tail, size_t N>
struct TransformerAt<TransformerList<Head, Tail...>, N> : TransformerAt<TransformerList<Tail...>, N-1> {};

// ---- Metadata Checker ----
template<typename SchemaMetadataKey, typename SchemaMetadataValue>
struct MetadataFilter {
    static bool check(const std::shared_ptr<arrow::Schema>& schema,
                      std::shared_ptr<arrow::RecordBatch>, int64_t) {
        auto md = schema->metadata();
        return md && md->Get(SchemaMetadataKey::value).ValueOr("") == SchemaMetadataValue::value;
    }
};

struct AllowAll {
    static bool check(const std::shared_ptr<arrow::Schema>&,
                      std::shared_ptr<arrow::RecordBatch>, int64_t) {
        return true;
    }
};

// ---- Streamed Backend ----
class StreamedBackend {
public:
    explicit StreamedBackend(std::unique_ptr<arrow::flight::FlightStreamReader> reader)
        : reader_(std::move(reader)) {}

    std::shared_ptr<arrow::RecordBatch> next_batch() {
        auto res = reader_->Next();
        if (res.ok() && res.ValueUnsafe().data) return res.ValueUnsafe().data;
        return nullptr;
    }
    std::shared_ptr<arrow::Schema> schema() const { return reader_->GetSchema().ValueOrDie(); }
private:
    std::unique_ptr<arrow::flight::FlightStreamReader> reader_;
};

// ---- Row Proxy ----
template<typename Transformers>
class RowProxy {
public:
    RowProxy(std::shared_ptr<arrow::RecordBatch> batch, int64_t row)
        : batch_(batch), row_(row) {}

    // Access column I
    template<size_t I>
    auto get() const {
        using TransformerT = typename TransformerAt<Transformers, I>::type;
        using ArrowType = typename TransformerT::arrow_type;

        auto col = batch_->column(I);
        if constexpr (std::is_same_v<ArrowType, arrow::StringType>) {
            auto arr = std::static_pointer_cast<arrow::StringArray>(col);
            auto raw = arr->GetString(row_);
            return TransformerT::forward(raw);
        } else {
            using ArrayType = typename arrow::TypeTraits<ArrowType>::ArrayType;
            auto arr = std::static_pointer_cast<ArrayType>(col);
            auto raw = arr->Value(row_);
            return TransformerT::forward(raw);
        }
    }

    // Catch-all: extra scalars
    std::vector<std::shared_ptr<arrow::Scalar>> receive_all() const {
        std::vector<std::shared_ptr<arrow::Scalar>> extras;
        size_t ncol = batch_->num_columns();
        constexpr size_t Tcols = Transformers::size;
        for (size_t i = Tcols; i < ncol; ++i) {
            auto res = batch_->column(i)->GetScalar(row_);
            if (res.ok()) extras.push_back(res.ValueUnsafe());
        }
        return extras;
    }
private:
    std::shared_ptr<arrow::RecordBatch> batch_;
    int64_t row_;
};

// ---- Iterator ----
template<typename Backend, typename Transformers,
         typename MetaChecker = AllowAll>
class RowIterator {
public:
    using value_type = RowProxy<Transformers>;
    RowIterator(std::shared_ptr<Backend> backend, bool end = false)
        : backend_(backend), row_idx_(end ? -1 : 0) {
        if (!end) { advance_batch(); advance_row(); }
    }
    bool operator!=(RowIterator const& other) const {
        return row_idx_ != other.row_idx_ || batch_.get() != other.batch_.get();
    }
    RowIterator& operator++() { advance_row(); return *this; }
    value_type operator*() const { return {batch_, row_idx_}; }
private:
    void advance_batch() { batch_ = backend_->next_batch(); row_idx_ = 0; }
    void advance_row() {
        while (batch_) {
            if (row_idx_ < batch_->num_rows() && MetaChecker::check(batch_->schema(), batch_, row_idx_))
                return;
            if (++row_idx_ >= batch_->num_rows()) advance_batch();
        }
        row_idx_ = -1;
    }
    std::shared_ptr<Backend> backend_;
    std::shared_ptr<arrow::RecordBatch> batch_;
    int64_t row_idx_;
};

// ---- Table View ----
template<typename Backend, typename Transformers,
         typename MetaChecker = AllowAll>
class TableView {
public:
    explicit TableView(std::shared_ptr<Backend> backend) : backend_(backend) {}
    auto begin() { return RowIterator<Backend, Transformers, MetaChecker>(backend_, false); }
    auto end()   { return RowIterator<Backend, Transformers, MetaChecker>(backend_, true); }
    template<typename New>
    auto addTransformer() const {
        using NewList = typename Transformers::template append<New>;
        return TableView<Backend, NewList, MetaChecker>(backend_);
    }
private:
    std::shared_ptr<Backend> backend_;
};


======

#include "ArrowTableIterator_Fixed.hpp"
#include <arrow/api.h>
#include <arrow/flight/api.h>
#include <arrow/record_batch.h>
#include <arrow/table.h>
#include <iostream>

struct ProcessTrueKey { static constexpr const char* value = "process"; };
struct ProcessTrueVal { static constexpr const char* value = "true"; };

int main() {
    auto loc = arrow::flight::Location::ForGrpcTcp("localhost", 8815).ValueOrDie();
    auto client = arrow::flight::FlightClient::Connect(loc).ValueOrDie();
    arrow::flight::FlightDescriptor descr = arrow::flight::FlightDescriptor::Command("my_table");

    arrow::KeyValueMetadata metadata; 
    metadata.Append("process", "true");
    auto schema = arrow::schema({
        arrow::field("i32", arrow::int32()),
        arrow::field("f64", arrow::float64()),
        arrow::field("bol", arrow::boolean()),
        arrow::field("str", arrow::utf8())
    }, std::shared_ptr<arrow::KeyValueMetadata>(&metadata, [](arrow::KeyValueMetadata*) {}));

    // Build arrays with proper error handling
    arrow::Int32Builder b1; 
    auto status1 = b1.AppendValues({1,2,3}); 
    std::shared_ptr<arrow::Array> a1; 
    auto finish1 = b1.Finish(&a1);
    
    arrow::DoubleBuilder b2; 
    auto status2 = b2.AppendValues({0.1,0.2,0.3}); 
    std::shared_ptr<arrow::Array> a2; 
    auto finish2 = b2.Finish(&a2);
    
    arrow::BooleanBuilder b3; 
    auto status3 = b3.AppendValues(std::vector<bool>{true,false,true}); 
    std::shared_ptr<arrow::Array> a3; 
    auto finish3 = b3.Finish(&a3);
    
    arrow::StringBuilder b4; 
    auto status4 = b4.AppendValues({"a","b","c"}); 
    std::shared_ptr<arrow::Array> a4; 
    auto finish4 = b4.Finish(&a4);
    auto table1 = arrow::Table::Make(schema, {a1,a2,a3,a4});

    auto do_put = [&](std::shared_ptr<arrow::Table> tbl) {
        auto put_result = client->DoPut(descr, tbl->schema());
        if (!put_result.ok()) {
            std::cerr << "DoPut failed: " << put_result.status().ToString() << std::endl;
            return;
        }
        auto writer = std::move(put_result).ValueOrDie().writer;
        arrow::TableBatchReader rdr(*tbl); 
        rdr.set_chunksize(2);
        std::shared_ptr<arrow::RecordBatch> rb;
        while (rdr.ReadNext(&rb).ok() && rb) {
            auto write_result = writer->WriteRecordBatch(*rb);
            if (!write_result.ok()) {
                std::cerr << "WriteRecordBatch failed: " << write_result.ToString() << std::endl;
                break;
            }
        }
        auto close_result = writer->Close();
    };

    do_put(table1);
    auto info1 = client->GetFlightInfo(descr).ValueOrDie();
    auto fr1 = client->DoGet(info1->endpoints()[0].ticket).ValueOrDie();
    
    // Create a simple table from the flight stream reader
    std::vector<std::shared_ptr<arrow::RecordBatch>> batches;
    while (true) {
        auto chunk_result = fr1->Next();
        if (!chunk_result.ok() || !chunk_result.ValueUnsafe().data) break;
        batches.push_back(chunk_result.ValueUnsafe().data);
    }
    auto table2_res = arrow::Table::FromRecordBatches(batches);
    auto table2 = table2_res.ValueOrDie();
    std::cout << "After 1st roundtrip:\n" << table2->ToString() << std::endl;

    do_put(table2);
    auto info2 = client->GetFlightInfo(descr).ValueOrDie();
    auto fr2 = client->DoGet(info2->endpoints()[0].ticket).ValueOrDie();
    auto backend = std::make_shared<StreamedBackend>(std::move(fr2));

    using BaseTs = TransformerList<IdentityInt32, IdentityDouble, IdentityBoolean, IdentityString>;
    using ExtendedTs = typename BaseTs::template append<ReceiveAllTransformer>;
    auto view = TableView<StreamedBackend, ExtendedTs, MetadataFilter<ProcessTrueKey, ProcessTrueVal>>(backend);

    std::cout << "Rows via iterator with metadata filter after 2nd roundtrip:\n";
    for (auto row : view) {
        auto i = row.template get<0>();
        auto d = row.template get<1>();
        auto b = row.template get<2>();
        auto s = row.template get<3>();
        auto extras = row.receive_all();
        std::cout << i << ", " << d << ", " << b << ", " << s
                  << ", extras=" << extras.size() << std::endl;
    }
    return 0;
}

void ReleaseObject(PyObjectId objectId) override {
        std::lock_guard<std::mutex> lock(m_objectMutex);
        auto it = m_objects.find(objectId);
        if (it != m_objects.end()) {
            Py_DECREF(it->second);
            m_objects.erase(it);
        }
    }
    
    void ReleaseAllObjects() override {
        std::lock_guard<std::mutex> lock(m_objectMutex);
        for (auto& [id, obj] : m_objects) {
            Py_DECREF(obj);
        }
        m_objects.clear();
    }
    
    // Object operations
    PyResult CallMethod(PyObjectId objectId, const std::string& method, 
                        const std::vector<PyObjectId>& args) override {
        PyObject* obj = GetObject(objectId);
        if (!obj) {
            PyResult result;
            result.success = false;
            result.error = "Invalid object ID";
            result.objectId = INVALID_OBJECT_ID;
            return result;
        }
        
        PyObject* methodObj = PyObject_GetAttrString(obj, method.c_str());
        if (!methodObj) {
            return MakeResult(nullptr);
        }
        
        // Convert args
        PyObject* pyArgs = PyTuple_New(args.size());
        for (size_t i = 0; i < args.size(); ++i) {
            PyObject* arg = GetObject(args[i]);
            if (!arg) {
                Py_DECREF(pyArgs);
                Py_DECREF(methodObj);
                PyResult result;
                result.success = false;
                result.error = "Invalid argument ID at position " + std::to_string(i);
                result.objectId = INVALID_OBJECT_ID;
                return result;
            }
            Py_INCREF(arg);
            PyTuple_SetItem(pyArgs, i, arg);
        }
        
        PyObject* result = PyObject_CallObject(methodObj, pyArgs);
        Py_DECREF(methodObj);
        Py_DECREF(pyArgs);
        
        return MakeResult(result, true);
    }
    
    PyResult GetAttribute(PyObjectId objectId, const std::string& attribute) override {
        PyObject* obj = GetObject(objectId);
        if (!obj) {
            PyResult result;
            result.success = false;
            result.error = "Invalid object ID";
            result.objectId = INVALID_OBJECT_ID;
            return result;
        }
        
        PyObject* attr = PyObject_GetAttrString(obj, attribute.c_str());
        return MakeResult(attr, true);
    }
    
    PyResult SetAttribute(PyObjectId objectId, const std::string& attribute, 
                          PyObjectId valueId) override {
        PyObject* obj = GetObject(objectId);
        PyObject* value = GetObject(valueId);
        
        if (!obj || !value) {
            PyResult result;
            result.success = false;
            result.error = "Invalid object or value ID";
            result.objectId = INVALID_OBJECT_ID;
            return result;
        }
        
        if (PyObject_SetAttrString(obj, attribute.c_str(), value) == 0) {
            PyResult result;
            result.success = true;
            result.objectId = valueId;
            return result;
        }
        
        return MakeResult(nullptr);
    }
    
    PyResult GetItem(PyObjectId objectId, PyObjectId keyId) override {
        PyObject* obj = GetObject(objectId);
        PyObject* key = GetObject(keyId);
        
        if (!obj || !key) {
            PyResult result;
            result.success = false;
            result.error = "Invalid object or key ID";
            result.objectId = INVALID_OBJECT_ID;
            return result;
        }
        
        PyObject* item = PyObject_GetItem(obj, key);
        return MakeResult(item, true);
    }
    
    PyResult SetItem(PyObjectId objectId, PyObjectId keyId, PyObjectId valueId) override {
        PyObject* obj = GetObject(objectId);
        PyObject* key = GetObject(keyId);
        PyObject* value = GetObject(valueId);
        
        if (!obj || !key || !value) {
            PyResult result;
            result.success = false;
            result.error = "Invalid object, key, or value ID";
            result.objectId = INVALID_OBJECT_ID;
            return result;
        }
        
        if (PyObject_SetItem(obj, key, value) == 0) {
            PyResult result;
            result.success = true;
            result.objectId = valueId;
            return result;
        }
        
        return MakeResult(nullptr);
    }
    
    // Type creation
    PyResult CreateInt(int64_t value) override {
        PyObject* obj = PyLong_FromLongLong(value);
        return MakeResult(obj, true);
    }
    
    PyResult CreateFloat(double value) override {
        PyObject* obj = PyFloat_FromDouble(value);
        return MakeResult(obj, true);
    }
    
    PyResult CreateString(const std::string& value) override {
        PyObject* obj = PyUnicode_FromString(value.c_str());
        return MakeResult(obj, true);
    }
    
    PyResult CreateBool(bool value) override {
        PyObject* obj = value ? Py_True : Py_False;
        Py_INCREF(obj);
        return MakeResult(obj, true);
    }
    
    PyResult CreateList(const std::vector<PyObjectId>& items) override {
        PyObject* list = PyList_New(items.size());
        for (size_t i = 0; i < items.size(); ++i) {
            PyObject* item = GetObject(items[i]);
            if (!item) {
                Py_DECREF(list);
                PyResult result;
                result.success = false;
                result.error = "Invalid item ID at position " + std::to_string(i);
                result.objectId = INVALID_OBJECT_ID;
                return result;
            }
            Py_INCREF(item);
            PyList_SetItem(list, i, item);
        }
        return MakeResult(list, true);
    }
    
    PyResult CreateDict(const std::map<PyObjectId, PyObjectId>& items) override {
        PyObject* dict = PyDict_New();
        for (const auto& [keyId, valueId] : items) {
            PyObject* key = GetObject(keyId);
            PyObject* value = GetObject(valueId);
            if (!key || !value) {
                Py_DECREF(dict);
                PyResult result;
                result.success = false;
                result.error = "Invalid key or value ID";
                result.objectId = INVALID_OBJECT_ID;
                return result;
            }
            PyDict_SetItem(dict, key, value);
        }
        return MakeResult(dict, true);
    }
    
    // Type extraction
    std::optional<int64_t> AsInt(PyObjectId objectId) override {
        PyObject* obj = GetObject(objectId);
        if (!obj || !PyLong_Check(obj)) return std::nullopt;
        return PyLong_AsLongLong(obj);
    }
    
    std::optional<double> AsFloat(PyObjectId objectId) override {
        PyObject* obj = GetObject(objectId);
        if (!obj) return std::nullopt;
        if (PyFloat_Check(obj)) return PyFloat_AsDouble(obj);
        if (PyLong_Check(obj)) return (double)PyLong_AsLongLong(obj);
        return std::nullopt;
    }
    
    std::optional<std::string> AsString(PyObjectId objectId) override {
        PyObject* obj = GetObject(objectId);
        if (!obj) return std::nullopt;
        
        if (PyUnicode_Check(obj)) {
            const char* str = PyUnicode_AsUTF8(obj);
            return str ? std::string(str) : std::nullopt;
        }
        
        // Try to convert to string
        PyObject* strObj = PyObject_Str(obj);
        if (strObj) {
            const char* str = PyUnicode_AsUTF8(strObj);
            std::string result = str ? str : "";
            Py_DECREF(strObj);
            return result;
        }
        
        return std::nullopt;
    }
    
    std::optional<bool> AsBool(PyObjectId objectId) override {
        PyObject* obj = GetObject(objectId);
        if (!obj) return std::nullopt;
        
        int truth = PyObject_IsTrue(obj);
        if (truth == -1) {
            PyErr_Clear();
            return std::nullopt;
        }
        return truth == 1;
    }
    
    // Introspection
    PyObjectInfo GetObjectInfo(PyObjectId objectId) override {
        PyObjectInfo info;
        info.id = objectId;
        
        PyObject* obj = GetObject(objectId);
        if (!obj) {
            info.type = "invalid";
            return info;
        }
        
        // Get type name
        PyObject* typeObj = PyObject_Type(obj);
        if (typeObj) {
            PyObject* typeName = PyObject_GetAttrString(typeObj, "__name__");
            if (typeName && PyUnicode_Check(typeName)) {
                info.type = PyUnicode_AsUTF8(typeName);
                Py_XDECREF(typeName);
            }
            Py_DECREF(typeObj);
        }
        
        // Get repr
        PyObject* repr = PyObject_Repr(obj);
        if (repr) {
            info.repr = PyUnicode_AsUTF8(repr);
            Py_DECREF(repr);
        }
        
        // Get attributes
        PyObject* dir = PyObject_Dir(obj);
        if (dir && PyList_Check(dir)) {
            Py_ssize_t size = PyList_Size(dir);
            for (Py_ssize_t i = 0; i < size; ++i) {
                PyObject* attr = PyList_GetItem(dir, i);
                if (PyUnicode_Check(attr)) {
                    info.attributes.push_back(PyUnicode_AsUTF8(attr));
                }
            }
            Py_DECREF(dir);
        }
        
        info.refCount = Py_REFCNT(obj);
        return info;
    }
    
    std::vector<std::string> GetGlobalNames() override {
        std::vector<std::string> names;
        
        PyObject* keys = PyDict_Keys(m_globalDict);
        if (keys) {
            Py_ssize_t size = PyList_Size(keys);
            for (Py_ssize_t i = 0; i < size; ++i) {
                PyObject* key = PyList_GetItem(keys, i);
                if (PyUnicode_Check(key)) {
                    const char* name = PyUnicode_AsUTF8(key);
                    if (name && name[0] != '_') {  // Skip private names
                        names.push_back(name);
                    }
                }
            }
            Py_DECREF(keys);
        }
        
        return names;
    }
    
    // Module operations
    PyResult ImportModule(const std::string& moduleName) override {
        PyObject* module = PyImport_ImportModule(moduleName.c_str());
        return MakeResult(module, true);
    }
    
    bool IsModuleLoaded(const std::string& moduleName) override {
        PyObject* modules = PyImport_GetModuleDict();
        PyObject* module = PyDict_GetItemString(modules, moduleName.c_str());
        return module != nullptr;
    }
    
private:
    std::string GetPythonError() {
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        
        std::string error = "Python error: ";
        
        if (value) {
            PyObject* str = PyObject_Str(value);
            if (str) {
                const char* text = PyUnicode_AsUTF8(str);
                if (text) {
                    error += text;
                }
                Py_DECREF(str);
            }
        }
        
        PyErr_Clear();
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        
        return error;
    }
};

// Export function for creating bridge instance
extern "C" __declspec(dllexport) IPythonBridge* CreatePythonBridge() {
    return new PythonBridge();
}

// Python module initialization (required for .pyd)
static PyMethodDef module_methods[] = {
    {nullptr, nullptr, 0, nullptr}
};

static struct PyModuleDef module_def = {
    PyModuleDef_HEAD_INIT,
    "pythonbridge",
    "Python bridge module for embedding with object storage",
    -1,
    module_methods
};

extern "C" __declspec(dllexport) PyObject* PyInit_pythonbridge() {
    return PyModule_Create(&module_def);
